// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  EMPLOYER
  APPLICANT
}

model Employer {
  id             Int      @id @default(autoincrement())
  slug           String   @unique
  companyName    String
  companyEmail   String?
  companyWebsite String?
  companyLogoUrl String?
  industry       String?
  location       String?
  about          String?
  pitch          String?
  perks          Json
  userId         String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  jobs           Job[]

  @@map("employers")
}

model Applicant {
  id                       Int              @id @default(autoincrement())
  firstName                String
  lastName                 String
  email                    String
  phoneNumber              String?
  location                 String?
  about                    String?
  profession               String
  experienced              String
  skills                   Json
  languages                Json
  availability             String
  preferredEmploymentTypes String[]
  preferredLocationTypes   String[]
  preferredLocations       Json
  salaryExpectation        Int
  userId                   String           @unique
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  jobApplications          JobApplication[]
  savedJobs                SavedJob[]

  @@map("applicants")
}

model Job {
  id              Int              @id @default(autoincrement())
  slug            String           @unique
  title           String
  employmentType  String
  locationType    String
  location        String?
  description     String?
  minSalary       Int
  maxSalary       Int
  approved        Boolean          @default(true)
  closed          Boolean          @default(false)
  userId          String
  employer        Employer         @relation(fields: [employerId], references: [id])
  employerId      Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  jobApplications JobApplication[]
  savedJobs       SavedJob[]

  @@map("jobs")
}

model JobApplication {
  id          Int       @id @default(autoincrement())
  pitch       String
  userId      String
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  applicantId Int
  job         Job       @relation(fields: [jobId], references: [id])
  jobId       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("jobApplications")
}

model SavedJob {
  id          Int       @id @default(autoincrement())
  userId      String
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  applicantId Int
  job         Job       @relation(fields: [jobId], references: [id])
  jobId       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("savedJobs")
}
